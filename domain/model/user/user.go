// Generated by: xorm

package user

import (
	"fmt"
	"time"
)

//go:generate gen

// User
// +gen slice:"Where,GroupBy[int],Any"
type User struct {

	// Id `json:"id" xorm:"pk autoincr BIGINT(20)"`
	Id int64 `json:"id" xorm:"pk autoincr BIGINT(20)"`
	// Email `json:"email" xorm:"not null unique VARCHAR(255)"`
	Email string `json:"email" xorm:"not null unique VARCHAR(255)"`
	// PasswordDigest `json:"password_digest" xorm:"CHAR(100)"`
	PasswordDigest string `json:"password_digest" xorm:"CHAR(100)"`
	// Version `json:"version" xorm:"not null INT(11)"`
	Version int `json:"version" xorm:"not null INT(11)"`
	// CreatedAt `json:"created_at" xorm:"not null created DATETIME"`
	CreatedAt time.Time `json:"created_at" xorm:"not null created DATETIME"`
	// UpdatedAt `json:"updated_at" xorm:"not null updated DATETIME"`
	UpdatedAt time.Time `json:"updated_at" xorm:"not null updated DATETIME"`
	// DeletedAt `json:"deleted_at" xorm:"deleted DATETIME"`
	DeletedAt time.Time `json:"deleted_at" xorm:"deleted DATETIME"`
}

type UserDto struct {
	entity           User
	updatedColumnMap map[string]struct{}
	order            int
	isCreated        bool
	isUpdated        bool
	isDeleted        bool
}

var (
	_UserTableName   = "user"
	_UserColumnNames = []string{"id", "email", "password_digest", "version", "created_at", "updated_at", "deleted_at"}
	_UserPrimaryKeys = []string{"id"}
)

// NewUserDto Dtoを返却します
func NewUserDto(e User) *UserDto {
	return &UserDto{
		entity:           e,
		updatedColumnMap: make(map[string]struct{}, 7),
	}
}

// GetId getter for id
func (m UserDto) GetId() int64 {
	return m.entity.Id
}

// SetEmail setter for email
func (m *UserDto) SetEmail(Email string) {
	if m == nil {
		return
	}
	m.updatedColumnMap["email"] = struct{}{}
	m.entity.Email = Email
}

// GetEmail getter for email
func (m UserDto) GetEmail() string {
	return m.entity.Email
}

// SetPasswordDigest setter for password_digest
func (m *UserDto) SetPasswordDigest(PasswordDigest string) {
	if m == nil {
		return
	}
	m.updatedColumnMap["password_digest"] = struct{}{}
	m.entity.PasswordDigest = PasswordDigest
}

// GetPasswordDigest getter for password_digest
func (m UserDto) GetPasswordDigest() string {
	return m.entity.PasswordDigest
}

// SetVersion setter for version
func (m *UserDto) SetVersion(Version int) {
	if m == nil {
		return
	}
	m.updatedColumnMap["version"] = struct{}{}
	m.entity.Version = Version
}

// GetVersion getter for version
func (m UserDto) GetVersion() int {
	return m.entity.Version
}

// SetCreatedAt setter for created_at
func (m *UserDto) SetCreatedAt(CreatedAt time.Time) {
	if m == nil {
		return
	}
	m.updatedColumnMap["created_at"] = struct{}{}
	m.entity.CreatedAt = CreatedAt
}

// GetCreatedAt getter for created_at
func (m UserDto) GetCreatedAt() time.Time {
	return m.entity.CreatedAt
}

// SetUpdatedAt setter for updated_at
func (m *UserDto) SetUpdatedAt(UpdatedAt time.Time) {
	if m == nil {
		return
	}
	m.updatedColumnMap["updated_at"] = struct{}{}
	m.entity.UpdatedAt = UpdatedAt
}

// GetUpdatedAt getter for updated_at
func (m UserDto) GetUpdatedAt() time.Time {
	return m.entity.UpdatedAt
}

// SetDeletedAt setter for deleted_at
func (m *UserDto) SetDeletedAt(DeletedAt time.Time) {
	if m == nil {
		return
	}
	m.updatedColumnMap["deleted_at"] = struct{}{}
	m.entity.DeletedAt = DeletedAt
}

// GetDeletedAt getter for deleted_at
func (m UserDto) GetDeletedAt() time.Time {
	return m.entity.DeletedAt
}

// SetEntity テーブルのエンティティを設定します
func (m *UserDto) SetEntity(e interface{}) {
	m.entity = (e).(User)
}

// Entity テーブルのエンティティを返却します
func (m UserDto) Entity() interface{} {
	return m.entity
}

// PEntity テーブルのエンティティのポインタを返却します
func (m *UserDto) PEntity() interface{} {
	return &m.entity
}

// Table テーブル名を返却します
func (m UserDto) Table() string {
	return _UserTableName
}

// Columns カラム名のスライスを返却します
func (m UserDto) Columns() []string {
	return _UserColumnNames
}

// PrimaryKeys 主キー名のスライスを返却します
func (m UserDto) PrimaryKeys() []string {
	return _UserPrimaryKeys
}

// CacheKey PrimaryKeyの値のスライスを返却します
func (m UserDto) PrimaryKeyValues() []interface{} {
	return []interface{}{
		m.entity.Id,
	}
}

// CacheKey PrimaryKeyを連結して、必ず一意になるKeyを返却します
func (m UserDto) CacheKey() string {
	return fmt.Sprintf(
		"%v",
		m.entity.Id,
	)
}

func (m UserDto) UpdatedColumns() []string {
	cols := make([]string, len(m.updatedColumnMap), len(m.updatedColumnMap))
	i := 0
	for col := range m.updatedColumnMap {
		cols[i] = col
		i++
	}
	return cols
}

func (m UserDto) Validate() error {

	if m.entity.Id < -9223372036854775808 || 9223372036854775807 < m.entity.Id {
		return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "Id", m.entity.Id)
	}

	if 255 < len(m.entity.Email) {
		return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "Email", m.entity.Email)
	}

	if len(m.entity.PasswordDigest) != 100 {
		return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "PasswordDigest", m.entity.PasswordDigest)
	}

	if m.entity.Version < -2147483648 || 2147483647 < m.entity.Version {
		return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "Version", m.entity.Version)
	}

	return nil
}

// IsCreated DBに存在しないレコードのモデルの場合はtrueを返却します
func (m UserDto) IsCreated() bool {
	return m.isCreated
}

// IsUpdated DBと差分があるレコードのモデルの場合はtrueを返却します
func (m UserDto) IsUpdated() bool {
	return m.isUpdated
}

// IsDeleted DBには存在するが削除されるレコードのモデルの場合はtrueを返却します
func (m UserDto) IsDeleted() bool {
	return m.isDeleted
}

// AsCreated DBにInsertするレコードのモデルとして設定する
func (m *UserDto) AsCreated() {
	if m != nil {
		m.isCreated = true
		m.isUpdated = false
		m.isDeleted = false
	}
}

// AsUpdated DBにUpdateするレコードのモデルとして設定する
func (m *UserDto) AsUpdated() {
	if m != nil {
		m.isCreated = false
		m.isUpdated = true
		m.isDeleted = false
	}
}

// AsDeleted DBにDeleteするレコードのモデルとして設定する
func (m *UserDto) AsDeleted() {
	if m != nil {
		m.isCreated = false
		m.isUpdated = false
		m.isDeleted = true
	}
}

// ToMap Mapに変換します
func (m UserDto) ToMap() map[string]interface{} {
	return map[string]interface{}{
		"Id":             m.entity.Id,
		"Email":          m.entity.Email,
		"PasswordDigest": m.entity.PasswordDigest,
		"Version":        m.entity.Version,
		"CreatedAt":      m.entity.CreatedAt,
		"UpdatedAt":      m.entity.UpdatedAt,
		"DeletedAt":      m.entity.DeletedAt,
	}
}

// SetOrder Dtoの更新順序を設定する
func (m *UserDto) SetOrder(o int) {
	m.order = o
}

// Order Dtoの更新順序を返却する
func (m UserDto) Order() int {
	return m.order
}
