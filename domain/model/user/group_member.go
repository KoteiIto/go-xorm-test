// Generated by: xorm

package user

import (
	"fmt"
	"time"
)

//go:generate gen

// GroupMember
// +gen slice:"Where,GroupBy[int],Any"
type GroupMember struct {

	// Id `json:"id" xorm:"pk BIGINT(20)"`
	Id int64 `json:"id" xorm:"pk BIGINT(20)"`
	// UserId `json:"user_id" xorm:"not null unique(uq_group_member_col_user_group) BIGINT(20)"`
	UserId int64 `json:"user_id" xorm:"not null unique(uq_group_member_col_user_group) BIGINT(20)"`
	// GroupId `json:"group_id" xorm:"not null unique(uq_group_member_col_user_group) INT(11)"`
	GroupId int `json:"group_id" xorm:"not null unique(uq_group_member_col_user_group) INT(11)"`
	// Role `json:"role" xorm:"not null ENUM('admin','guest')"`
	Role string `json:"role" xorm:"not null ENUM('admin','guest')"`
	// CreatedAt `json:"created_at" xorm:"not null created DATETIME"`
	CreatedAt time.Time `json:"created_at" xorm:"not null created DATETIME"`
	// UpdatedAt `json:"updated_at" xorm:"not null updated DATETIME"`
	UpdatedAt time.Time `json:"updated_at" xorm:"not null updated DATETIME"`
	// DeletedAt `json:"deleted_at" xorm:"deleted DATETIME"`
	DeletedAt time.Time `json:"deleted_at" xorm:"deleted DATETIME"`

	isCreated bool `json:"-" xorm:"-"`
	isUpdated bool `json:"-" xorm:"-"`
	isDeleted bool `json:"-" xorm:"-"`
}

const (
	GroupMemberRoleAdmin = "admin"
	GroupMemberRoleGuest = "guest"
)

var (
	_GroupMemberTableName   = "group_member"
	_GroupMemberColumnNames = []string{"id", "user_id", "group_id", "role", "created_at", "updated_at", "deleted_at"}
	_GroupMemberPrimaryKeys = []string{"id"}
	_GroupMemberRoleEnums   = []string{"admin", "guest"}
)

// Table テーブル名を返却します
func (m GroupMember) Table() string {
	return _GroupMemberTableName
}

// Columns カラム名のスライスを返却します
func (m GroupMember) Columns() []string {
	return _GroupMemberColumnNames
}

// PrimaryKeys 主キー名のスライスを返却します
func (m GroupMember) PrimaryKeys() []string {
	return _GroupMemberPrimaryKeys
}

// CacheKey PrimaryKeyを連結して、必ず一意になるKeyを返却します
func (m GroupMember) CacheKey() string {
	return fmt.Sprintf(
		"%v",
		m.Id,
	)
}

func (m GroupMember) Validate() error {

	if m.Id < -9223372036854775808 || 9223372036854775807 < m.Id {
		return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "Id", m.Id)
	}

	if m.UserId < -9223372036854775808 || 9223372036854775807 < m.UserId {
		return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "UserId", m.UserId)
	}

	if m.GroupId < -2147483648 || 2147483647 < m.GroupId {
		return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "GroupId", m.GroupId)
	}

	ok := false
	for _, v := range _GroupMemberRoleEnums {
		if m.Role == v {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "Role", m.Role)
	}

	return nil
}

// IsCreated DBに存在しないレコードのモデルの場合はtrueを返却します
func (m GroupMember) IsCreated() bool {
	return m.isCreated
}

// IsUpdated DBと差分があるレコードのモデルの場合はtrueを返却します
func (m GroupMember) IsUpdated() bool {
	return m.isUpdated
}

// IsDeleted DBには存在するが削除されるレコードのモデルの場合はtrueを返却します
func (m GroupMember) IsDeleted() bool {
	return m.isDeleted
}

// AsCreated DBにInsertするレコードのモデルとして設定する
func (m *GroupMember) AsCreated() {
	if m != nil {
		m.isCreated = true
	}
}

// AsUpdated DBにUpdateするレコードのモデルとして設定する
func (m *GroupMember) AsUpdated() {
	if m != nil {
		m.isUpdated = true
	}
}

// AsDeleted DBにDeleteするレコードのモデルとして設定する
func (m *GroupMember) AsDeleted() {
	if m != nil {
		m.isDeleted = true
	}
}

// ToMap Mapに変換します
func (m GroupMember) ToMap() map[string]interface{} {
	return map[string]interface{}{
		"Id":        m.Id,
		"UserId":    m.UserId,
		"GroupId":   m.GroupId,
		"Role":      m.Role,
		"CreatedAt": m.CreatedAt,
		"UpdatedAt": m.UpdatedAt,
		"DeletedAt": m.DeletedAt,
	}
}
