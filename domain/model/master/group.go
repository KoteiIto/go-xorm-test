// Generated by: xorm

package master

import (
	"fmt"
	"time"

	"github.com/KoteiIto/go-xorm-test/domain/model/condition"
)

// Group
// +gen slice:"Where,GroupBy[int],Any"
type Group struct {

	// Id `json:"id" xorm:"not null pk INT(11)"`
	Id int `json:"id" xorm:"not null pk INT(11)"`
	// Name `json:"name" xorm:"not null VARCHAR(255)"`
	Name string `json:"name" xorm:"not null VARCHAR(255)"`
	// Description `json:"description" xorm:"not null TEXT"`
	Description string `json:"description" xorm:"not null TEXT"`
	// CreatedAt `json:"created_at" xorm:"not null created DATETIME"`
	CreatedAt time.Time `json:"created_at" xorm:"not null created DATETIME"`
	// UpdatedAt `json:"updated_at" xorm:"not null updated DATETIME"`
	UpdatedAt time.Time `json:"updated_at" xorm:"not null updated DATETIME"`
	// DeletedAt `json:"deleted_at" xorm:"deleted DATETIME"`
	DeletedAt time.Time `json:"deleted_at" xorm:"deleted DATETIME"`
}

type GroupDto struct {
	entity           Group
	updatedColumnMap map[string]struct{}
	order            int
	isCreated        bool
	isUpdated        bool
	isDeleted        bool
}

const (
	GroupColumnId          = "id"
	GroupColumnName        = "name"
	GroupColumnDescription = "description"
	GroupColumnCreatedAt   = "created_at"
	GroupColumnUpdatedAt   = "updated_at"
	GroupColumnDeletedAt   = "deleted_at"
)

var (
	_GroupTableName   = "group"
	_GroupColumnNames = []string{"id", "name", "description", "created_at", "updated_at", "deleted_at"}
	_GroupPrimaryKeys = []string{"id"}
)

// NewGroupDto Dtoを返却します
func NewGroupDto(e Group) *GroupDto {
	return &GroupDto{
		entity:           e,
		updatedColumnMap: make(map[string]struct{}, 6),
	}
}

// GetId getter for id
func (m GroupDto) GetId() int {
	return m.entity.Id
}

// SetName setter for name
func (m *GroupDto) SetName(Name string) {
	if m == nil {
		return
	}
	m.updatedColumnMap["name"] = struct{}{}
	m.entity.Name = Name
}

// GetName getter for name
func (m GroupDto) GetName() string {
	return m.entity.Name
}

// SetDescription setter for description
func (m *GroupDto) SetDescription(Description string) {
	if m == nil {
		return
	}
	m.updatedColumnMap["description"] = struct{}{}
	m.entity.Description = Description
}

// GetDescription getter for description
func (m GroupDto) GetDescription() string {
	return m.entity.Description
}

// SetCreatedAt setter for created_at
func (m *GroupDto) SetCreatedAt(CreatedAt time.Time) {
	if m == nil {
		return
	}
	m.updatedColumnMap["created_at"] = struct{}{}
	m.entity.CreatedAt = CreatedAt
}

// GetCreatedAt getter for created_at
func (m GroupDto) GetCreatedAt() time.Time {
	return m.entity.CreatedAt
}

// SetUpdatedAt setter for updated_at
func (m *GroupDto) SetUpdatedAt(UpdatedAt time.Time) {
	if m == nil {
		return
	}
	m.updatedColumnMap["updated_at"] = struct{}{}
	m.entity.UpdatedAt = UpdatedAt
}

// GetUpdatedAt getter for updated_at
func (m GroupDto) GetUpdatedAt() time.Time {
	return m.entity.UpdatedAt
}

// SetDeletedAt setter for deleted_at
func (m *GroupDto) SetDeletedAt(DeletedAt time.Time) {
	if m == nil {
		return
	}
	m.updatedColumnMap["deleted_at"] = struct{}{}
	m.entity.DeletedAt = DeletedAt
}

// GetDeletedAt getter for deleted_at
func (m GroupDto) GetDeletedAt() time.Time {
	return m.entity.DeletedAt
}

// SetEntity テーブルのエンティティを設定します
func (m *GroupDto) SetEntity(e interface{}) {
	m.entity = (e).(Group)
}

// Entity テーブルのエンティティを返却します
func (m GroupDto) Entity() interface{} {
	return m.entity
}

// PEntity テーブルのエンティティのポインタを返却します
func (m *GroupDto) PEntity() interface{} {
	return &m.entity
}

// Table テーブル名を返却します
func (m GroupDto) Table() string {
	return _GroupTableName
}

// Columns カラム名のスライスを返却します
func (m GroupDto) Columns() []string {
	return _GroupColumnNames
}

// PrimaryKeys 主キー名のスライスを返却します
func (m GroupDto) PrimaryKeys() []string {
	return _GroupPrimaryKeys
}

// CacheKey PrimaryKeyの値のスライスを返却します
func (m GroupDto) PrimaryKeyValues() []interface{} {
	return []interface{}{
		m.entity.Id,
	}
}

// CacheKey PrimaryKeyを連結して、必ず一意になるKeyを返却します
func (m GroupDto) CacheKey() string {
	return fmt.Sprintf(
		"%v",
		m.entity.Id,
	)
}

func (m GroupDto) UpdatedColumns() []string {
	cols := make([]string, len(m.updatedColumnMap), len(m.updatedColumnMap))
	i := 0
	for col := range m.updatedColumnMap {
		cols[i] = col
		i++
	}
	return cols
}

func (m GroupDto) Validate() error {

	if m.entity.Id < -2147483648 || 2147483647 < m.entity.Id {
		return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "Id", m.entity.Id)
	}

	if 255 < len(m.entity.Name) {
		return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "Name", m.entity.Name)
	}

	return nil
}

// IsCreated DBに存在しないレコードのモデルの場合はtrueを返却します
func (m GroupDto) IsCreated() bool {
	return m.isCreated
}

// IsUpdated DBと差分があるレコードのモデルの場合はtrueを返却します
func (m GroupDto) IsUpdated() bool {
	return m.isUpdated
}

// IsDeleted DBには存在するが削除されるレコードのモデルの場合はtrueを返却します
func (m GroupDto) IsDeleted() bool {
	return m.isDeleted
}

// AsCreated DBにInsertするレコードのモデルとして設定する
func (m *GroupDto) AsCreated() {
	if m != nil {
		m.isCreated = true
		m.isUpdated = false
		m.isDeleted = false
	}
}

// AsUpdated DBにUpdateするレコードのモデルとして設定する
func (m *GroupDto) AsUpdated() {
	if m != nil {
		m.isCreated = false
		m.isUpdated = true
		m.isDeleted = false
	}
}

// AsDeleted DBにDeleteするレコードのモデルとして設定する
func (m *GroupDto) AsDeleted() {
	if m != nil {
		m.isCreated = false
		m.isUpdated = false
		m.isDeleted = true
	}
}

// Value カラム名の値を返却します
func (m GroupDto) Value(col string) interface{} {
	switch col {
	case GroupColumnId:
		return m.entity.Id
	case GroupColumnName:
		return m.entity.Name
	case GroupColumnDescription:
		return m.entity.Description
	case GroupColumnCreatedAt:
		return m.entity.CreatedAt
	case GroupColumnUpdatedAt:
		return m.entity.UpdatedAt
	case GroupColumnDeletedAt:
		return m.entity.DeletedAt

	}
	return nil
}

// ToMap Mapに変換します
func (m GroupDto) ToMap() map[string]interface{} {
	return map[string]interface{}{
		"Id":          m.entity.Id,
		"Name":        m.entity.Name,
		"Description": m.entity.Description,
		"CreatedAt":   m.entity.CreatedAt,
		"UpdatedAt":   m.entity.UpdatedAt,
		"DeletedAt":   m.entity.DeletedAt,
	}
}

// SetOrder Dtoの更新順序を設定する
func (m *GroupDto) SetOrder(o int) {
	m.order = o
}

// Order Dtoの更新順序を返却する
func (m GroupDto) Order() int {
	return m.order
}

func GenGroupIdCondition(operator condition.OperatorType, val int) condition.Condition {
	return condition.Condition{
		Column:   GroupColumnId,
		Operator: operator,
		Value:    val,
	}
}

func GenGroupNameCondition(operator condition.OperatorType, val string) condition.Condition {
	return condition.Condition{
		Column:   GroupColumnName,
		Operator: operator,
		Value:    val,
	}
}

func GenGroupDescriptionCondition(operator condition.OperatorType, val string) condition.Condition {
	return condition.Condition{
		Column:   GroupColumnDescription,
		Operator: operator,
		Value:    val,
	}
}

func GenGroupCreatedAtCondition(operator condition.OperatorType, val time.Time) condition.Condition {
	return condition.Condition{
		Column:   GroupColumnCreatedAt,
		Operator: operator,
		Value:    val,
	}
}

func GenGroupUpdatedAtCondition(operator condition.OperatorType, val time.Time) condition.Condition {
	return condition.Condition{
		Column:   GroupColumnUpdatedAt,
		Operator: operator,
		Value:    val,
	}
}

func GenGroupDeletedAtCondition(operator condition.OperatorType, val time.Time) condition.Condition {
	return condition.Condition{
		Column:   GroupColumnDeletedAt,
		Operator: operator,
		Value:    val,
	}
}
