// Generated by: xorm

package master

import (
	"fmt"
	"time"
)

//go:generate gen

// Group
// +gen slice:"Where,GroupBy[int],Any"
type Group struct {

	// Id `json:"id" xorm:"not null pk INT(11)"`
	Id int `json:"id" xorm:"not null pk INT(11)"`
	// Name `json:"name" xorm:"not null VARCHAR(255)"`
	Name string `json:"name" xorm:"not null VARCHAR(255)"`
	// Description `json:"description" xorm:"not null TEXT"`
	Description string `json:"description" xorm:"not null TEXT"`
	// CreatedAt `json:"created_at" xorm:"not null created DATETIME"`
	CreatedAt time.Time `json:"created_at" xorm:"not null created DATETIME"`
	// UpdatedAt `json:"updated_at" xorm:"not null updated DATETIME"`
	UpdatedAt time.Time `json:"updated_at" xorm:"not null updated DATETIME"`
	// DeletedAt `json:"deleted_at" xorm:"deleted DATETIME"`
	DeletedAt time.Time `json:"deleted_at" xorm:"deleted DATETIME"`

	isCreated bool `json:"-" xorm:"-"`
	isUpdated bool `json:"-" xorm:"-"`
	isDeleted bool `json:"-" xorm:"-"`
}

var (
	_GroupTableName   = "group"
	_GroupColumnNames = []string{"id", "name", "description", "created_at", "updated_at", "deleted_at"}
	_GroupPrimaryKeys = []string{"id"}
)

// Table テーブル名を返却します
func (m Group) Table() string {
	return _GroupTableName
}

// Columns カラム名のスライスを返却します
func (m Group) Columns() []string {
	return _GroupColumnNames
}

// PrimaryKeys 主キー名のスライスを返却します
func (m Group) PrimaryKeys() []string {
	return _GroupPrimaryKeys
}

// CacheKey PrimaryKeyを連結して、必ず一意になるKeyを返却します
func (m Group) CacheKey() string {
	return fmt.Sprintf(
		"%v",
		m.Id,
	)
}

func (m Group) Validate() error {

	if m.Id < -2147483648 || 2147483647 < m.Id {
		return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "Id", m.Id)
	}

	if 255 < len(m.Name) {
		return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "Name", m.Name)
	}

	return nil
}

// IsCreated DBに存在しないレコードのモデルの場合はtrueを返却します
func (m Group) IsCreated() bool {
	return m.isCreated
}

// IsUpdated DBと差分があるレコードのモデルの場合はtrueを返却します
func (m Group) IsUpdated() bool {
	return m.isUpdated
}

// IsDeleted DBには存在するが削除されるレコードのモデルの場合はtrueを返却します
func (m Group) IsDeleted() bool {
	return m.isDeleted
}

// AsCreated DBにInsertするレコードのモデルとして設定する
func (m *Group) AsCreated() {
	if m != nil {
		m.isCreated = true
	}
}

// AsUpdated DBにUpdateするレコードのモデルとして設定する
func (m *Group) AsUpdated() {
	if m != nil {
		m.isUpdated = true
	}
}

// AsDeleted DBにDeleteするレコードのモデルとして設定する
func (m *Group) AsDeleted() {
	if m != nil {
		m.isDeleted = true
	}
}

// ToMap Mapに変換します
func (m Group) ToMap() map[string]interface{} {
	return map[string]interface{}{
		"Id":          m.Id,
		"Name":        m.Name,
		"Description": m.Description,
		"CreatedAt":   m.CreatedAt,
		"UpdatedAt":   m.UpdatedAt,
		"DeletedAt":   m.DeletedAt,
	}
}
