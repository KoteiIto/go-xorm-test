// Generated by: xorm

package {{.Models}}

{{$ilen := len .Imports}}
{{if gt $ilen 0}}
import (
	"fmt"
	{{range .Imports}}"{{.}}"{{end}}
)
{{end}}

//go:generate gen

{{range .Tables}}
// {{Mapper .Name}} {{.Comment}}
// +gen slice:"Where,GroupBy[int],Any"
type {{Mapper .Name}} struct {
{{$table := .}}
{{range .ColumnsSeq}}{{$col := $table.GetColumn .}}	// {{Mapper $col.Name}} {{$col.Comment}}{{Tag $table $col}}
{{Mapper $col.Name}}	{{Type $col}} {{Tag $table $col}}
{{end}}
isCreated bool `json:"-" xorm:"-"`
isUpdated bool `json:"-" xorm:"-"`
isDeleted bool `json:"-" xorm:"-"`
}

{{range $i,$c := $table.Columns}}
{{if ne (len $c.EnumOptions) 0}}
const (
	{{range $o, $v := $c.EnumOptions}}
	{{Mapper $table.Name}}{{Mapper $c.Name}}{{Mapper $o}} = "{{$o}}"{{end}}
)
{{end}}
{{end}}

var (
	_{{Mapper .Name}}TableName = "{{.Name}}"
	_{{Mapper .Name}}ColumnNames = [{{len $table.Columns}}]string{ {{range $i,$e := $table.Columns}}{{if $i}},{{end}}"{{$e.Name}}"{{end}} }
)

{{range $i,$c := $table.Columns}}
{{if ne (len $c.EnumOptions) 0}}
var {{Mapper $table.Name}}{{Mapper $c.Name}}Enums = [{{len $c.EnumOptions}}]string{ {{range $o, $_ := $c.EnumOptions}}"{{$o}}",{{end}} }
{{end}}
{{end}}

// Table テーブル名を返却します
func (m {{Mapper .Name}}) Table () string {
	return _{{Mapper .Name}}TableName
}

// Columns カラム名のスライスを返却します
func (m {{Mapper .Name}}) Columns () [{{len $table.Columns}}]string {
	return _{{Mapper .Name}}ColumnNames
}

// PrimaryKeys 主キー名のスライスを返却します
func (m {{Mapper .Name}}) PrimaryKeys () []string {
	return []string{ {{range $i,$e := $table.PrimaryKeys}}{{if $i}},{{end}}"{{$e}}"{{end}} }
}

// CacheKey PrimaryKeyを連結して、必ず一意になるKeyを返却します
func (m {{Mapper .Name}}) CacheKey () string {
	return fmt.Sprintf(
		"{{range $i,$e := $table.PrimaryKeys}}{{if $i}}_{{end}}%v{{end}}", 
		{{range $i,$e := $table.PrimaryKeys}}{{$col := $table.GetColumn $e}}{{if $i}},{{end}}m.{{Mapper $col.Name}}{{end}},
	)
}

func (m {{Mapper .Name}}) Validate() error {
	{{range $i,$e := $table.Columns}}
		{{if and (eq $e.SQLType.Name "BIGINT") }}
			if m.{{Mapper $e.Name}} <  -9223372036854775808 || 9223372036854775807 < m.{{Mapper $e.Name}} {
				return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "{{Mapper $e.Name}}", m.{{Mapper $e.Name}})
			}
		{{end}}

		{{if and (eq $e.SQLType.Name "INT") (eq $e.SQLType.DefaultLength 11) }}
			if m.{{Mapper $e.Name}} <  -2147483648 || 2147483647 < m.{{Mapper $e.Name}} {
				return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "{{Mapper $e.Name}}", m.{{Mapper $e.Name}})
			}
		{{end}}

		{{if and (eq $e.SQLType.Name "INT") (eq $e.SQLType.DefaultLength 10) }}
			if m.{{Mapper $e.Name}} <  0 || 4294967295 < m.{{Mapper $e.Name}} {
				return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "{{Mapper $e.Name}}", m.{{Mapper $e.Name}})
			}
		{{end}}

		{{if and (eq $e.SQLType.Name "MEDIUMINT") (eq $e.SQLType.DefaultLength 9) }}
			if m.{{Mapper $e.Name}} <  -8388608 || 8388607 < m.{{Mapper $e.Name}} {
				return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "{{Mapper $e.Name}}", m.{{Mapper $e.Name}})
			}
		{{end}}

		{{if and (eq $e.SQLType.Name "MEDIUMINT") (eq $e.SQLType.DefaultLength 8) }}
			if m.{{Mapper $e.Name}} <  0 || 16777215 < m.{{Mapper $e.Name}} {
				return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "{{Mapper $e.Name}}", m.{{Mapper $e.Name}})
			}
		{{end}}

		{{if and (eq $e.SQLType.Name "SMALLINT") (eq $e.SQLType.DefaultLength 7) }}
			if m.{{Mapper $e.Name}} <  -32768 || 32767 < m.{{Mapper $e.Name}} {
				return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "{{Mapper $e.Name}}", m.{{Mapper $e.Name}})
			}
		{{end}}

		{{if and (eq $e.SQLType.Name "SMALLINT") (eq $e.SQLType.DefaultLength 6) }}
			if m.{{Mapper $e.Name}} <  0 || 65535 < m.{{Mapper $e.Name}} {
				return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "{{Mapper $e.Name}}", m.{{Mapper $e.Name}})
			}
		{{end}}

		{{if and (eq $e.SQLType.Name "TINYINT") (eq $e.SQLType.DefaultLength 4) }}
			if m.{{Mapper $e.Name}} <  -128 || 127 < m.{{Mapper $e.Name}} {
				return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "{{Mapper $e.Name}}", m.{{Mapper $e.Name}})
			}
		{{end}}

		{{if and (eq $e.SQLType.Name "TINYINT") (eq $e.SQLType.DefaultLength 3) }}
			if m.{{Mapper $e.Name}} <  0 || 255 < m.{{Mapper $e.Name}} {
				return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "{{Mapper $e.Name}}", m.{{Mapper $e.Name}})
			}
		{{end}}

		{{if and (eq $e.SQLType.Name "VARCHAR") }}
			if {{$e.Length }} < len(m.{{Mapper $e.Name}}) {
				return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "{{Mapper $e.Name}}", m.{{Mapper $e.Name}})
			}
		{{end}}

		{{if and (eq $e.SQLType.Name "CHAR") }}
			if len(m.{{Mapper $e.Name}}) != {{$e.Length }} {
				return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "{{Mapper $e.Name}}", m.{{Mapper $e.Name}})
			}
		{{end}}

		{{if and (eq $e.SQLType.Name "ENUM") }}
			ok := false
			for _, v := range {{Mapper $table.Name}}{{Mapper $e.Name}}Enums {
				if m.{{Mapper $e.Name}} == v {
					ok = true
					break
				}
			}
			if !ok {
				return fmt.Errorf("validation error. invalid column value. column=[%s], value=[%v]", "{{Mapper $e.Name}}", m.{{Mapper $e.Name}})
			}
		{{end}}

	{{end}}
	return nil
}

// IsCreated DBに存在しないレコードのモデルの場合はtrueを返却します
func (m {{Mapper .Name}}) IsCreated () bool {
	return m.isCreated
}

// IsUpdated DBと差分があるレコードのモデルの場合はtrueを返却します
func (m {{Mapper .Name}}) IsUpdated () bool {
	return m.isUpdated
}

// IsDeleted DBには存在するが削除されるレコードのモデルの場合はtrueを返却します
func (m {{Mapper .Name}}) IsDeleted () bool {
	return m.isDeleted
}

// AsCreated DBにInsertするレコードのモデルとして設定する
func (m *{{Mapper .Name}}) AsCreated () {
	if m != nil {
		m.isCreated = true
	}	
}

// AsUpdated DBにUpdateするレコードのモデルとして設定する
func (m *{{Mapper .Name}}) AsUpdated () {
	if m != nil {
		m.isUpdated = true
	}
}

// AsDeleted DBにDeleteするレコードのモデルとして設定する
func (m *{{Mapper .Name}}) AsDeleted () {
	if m != nil {
		m.isDeleted = true
	}
}

// ToMap Mapに変換します
func (m {{Mapper .Name}}) ToMap () map[string]interface{} {
	return map[string]interface{}{ 
		{{range $i,$e := $table.Columns}}"{{Mapper $e.Name}}": m.{{Mapper $e.Name}},
		{{end}}
	}
}

{{end}}
