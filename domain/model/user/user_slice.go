// Generated by: gen
// TypeWriter: slice
// Directive: +gen on User

package user

// UserSlice is a slice of type User. Use it where you would use []User.
type UserSlice []User

// Where returns a new UserSlice whose elements return true for func. See: http://clipperhouse.github.io/gen/#Where
func (rcv UserSlice) Where(fn func(User) bool) (result UserSlice) {
	for _, v := range rcv {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// GroupByInt groups elements into a map keyed by int. See: http://clipperhouse.github.io/gen/#GroupBy
func (rcv UserSlice) GroupByInt(fn func(User) int) map[int]UserSlice {
	result := make(map[int]UserSlice)
	for _, v := range rcv {
		key := fn(v)
		result[key] = append(result[key], v)
	}
	return result
}

// Any verifies that one or more elements of UserSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#Any
func (rcv UserSlice) Any(fn func(User) bool) bool {
	for _, v := range rcv {
		if fn(v) {
			return true
		}
	}
	return false
}
